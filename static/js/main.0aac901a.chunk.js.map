{"version":3,"sources":["Pics/Logo-white.png","Component/Content/NavBar.js","Component/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","notTransparentVariant","BasePath","checkIfTransparent","pathCheck","findIndex","path","concat","NavBar","window","location","pathname","_useState","useState","_useState2","Object","slicedToArray","isSticky","setSticky","onscroll","scrollY","react_default","a","createElement","Navbar","bg","variant","expand","fixed","Container","Brand","href","src","brandLogo","alt","style","maxHeight","Toggle","aria-controls","Collapse","id","className","Nav","Link","App","react_router_dom","basename","Boolean","hostname","match","ReactDOM","render","Component_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uTCIlCC,EAAwB,CAAC,cAAc,YACvCC,EAAW,aACXC,EAAqB,SAACC,GACxB,OAA4F,IAApFH,EAAsBI,UAAW,SAAAC,GAAI,MAAI,GAAAC,OAAIL,GAAJK,OAAeD,KAAYF,KAGjE,SAASI,IACpB,IAAMF,EAAOG,OAAOC,SAASC,SAC7BC,EAA8BC,oBAAS,GAAvCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAiBI,EAAjBJ,EAAA,GAQA,OAPAL,OAAOU,SAAW,WACVV,OAAOW,QAAU,GACjBF,GAAU,GAEVA,GAAU,IAIdG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,IAAKtB,EAAmBG,IAASW,EAAW,OAAS,cAAgBS,QAAQ,OAAOC,OAAO,KAAKC,MAAO,OAC3GP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACC,EAAA,EAAOM,MAAR,CAAcC,KAAI,GAAAxB,OAAKL,EAAL,MAAkBmB,EAAAC,EAAAC,cAAA,OAAKS,IAAKC,IAAWC,IAAI,OAAOC,MAAO,CAACC,UAAY,WACxFf,EAAAC,EAAAC,cAACC,EAAA,EAAOa,OAAR,CAAeC,gBAAc,qBAC7BjB,EAAAC,EAAAC,cAACC,EAAA,EAAOe,SAAR,CAAiBC,GAAG,mBAAmBC,UAAU,uBAC7CpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAKD,UAAU,uBACXpB,EAAAC,EAAAC,cAACmB,EAAA,EAAIC,KAAL,CAAUZ,KAAI,GAAAxB,OAAKL,EAAL,MAAd,QACAmB,EAAAC,EAAAC,cAACmB,EAAA,EAAIC,KAAL,CAAUZ,KAAI,GAAAxB,OAAKL,EAAL,gBAAd,SACAmB,EAAAC,EAAAC,cAACmB,EAAA,EAAIC,KAAL,CAAUZ,KAAI,GAAAxB,OAAKL,EAAL,aAAd,eCpBxB,IAWe0C,EAXH,WACR,OACIvB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACXpB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,SAAS,cAAjB,eAEIzB,EAAAC,EAAAC,cAACf,EAAD,SCFIuC,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0aac901a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo-white.7bbe8bec.png\";","import React, { useState } from 'react';\r\nimport { Container, Nav, Navbar } from 'react-bootstrap';\r\nimport brandLogo from '../../Pics/Logo-white.png';\r\n\r\nconst notTransparentVariant = ['/portofolio','/contact']\r\nconst BasePath = \"/Landing_P\";\r\nconst checkIfTransparent = (pathCheck) => {\r\n    return (notTransparentVariant.findIndex( path => (`${BasePath}${path}`) === pathCheck) === -1);\r\n}\r\n\r\nexport default function NavBar (){\r\n    const path = window.location.pathname;\r\n    const [isSticky, setSticky] = useState(false);\r\n    window.onscroll = () => {\r\n        if (window.scrollY > 50) {\r\n            setSticky(true);\r\n        } else {\r\n            setSticky(false);\r\n        }\r\n    };\r\n    return (\r\n        <Navbar bg={!checkIfTransparent(path) || isSticky ? 'blue' : 'transparent' } variant='dark' expand=\"lg\" fixed={\"top\"}>\r\n            <Container>\r\n                <Navbar.Brand href={`${BasePath}/`}><img src={brandLogo} alt='home' style={{maxHeight : '40px'}}/></Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\r\n                    <Nav className=\"justify-content-end\">\r\n                        <Nav.Link href={`${BasePath}/`}>Home</Nav.Link>\r\n                        <Nav.Link href={`${BasePath}/portofolio`}>Porto</Nav.Link>\r\n                        <Nav.Link href={`${BasePath}/contact`}>Contact</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Redirect, Route } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'antd/dist/antd.css';\r\nimport 'react-slideshow-image/dist/styles.css'\r\nimport '../Styles/bootstrap-grid.css';\r\nimport '../Styles/App.scss';\r\nimport NavBar from './Content/NavBar';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <Router basename=\"/Landing_P\">\r\n                ASDASDASDASD\r\n                <NavBar/>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styles/index.css';\r\nimport App from './Component/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}